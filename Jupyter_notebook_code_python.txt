# coding: utf-8
# In[3]: import pandas as pd import numpy as np from sklearn.metrics import confusion_matrix
# In[6]: data = pd.read_csv('DeepSigWeb.txt',sep = ' ', delimiter = '\t') data.drop([0],inplace = True) data
# In[8]: data['PredictedSignal'].value_counts()
# In[2]: def truth(data): if data['PredictedSignal'] =='Other': return 2 else : return 1
# In[40]: data['hypothesis'] = data.apply(truth,axis = 1) data.head()
# In[41]: data.columns
# In[42]: data['ProteinID'] = data['ProteinID '] data.index = data['ProteinID ']
#data.drop(['ProteinID '],axis = 1,inplace = True) data[['PredictedSignal','hypothesis']].tail()
# In[43]: given_data = pd.read_csv('ITS.dataset',names=['Data'])
# In[44]: given_data.head()
# In[45]:
#Converting the data to the required format in the following steps actual_data = pd.DataFrame(np.random.randint(0,10,size=(int(len(given_data)/4), 2)),columns=['Entry ID','real_values'])
# In[46]: k=0 l=0 for i in range(0,len(given_data)): if i%4 == 0: actual_data.iloc[k,0] = given_data.iloc[i,0] k+=1 if i%4 == 3: actual_data.iloc[l,1] = given_data.iloc[i,0] l+=1
# In[47]: actual_data.index = actual_data['Entry ID'] actual_data.tail()
# In[48]: result = pd.concat([data['hypothesis'],actual_data['real_values']],axis = 1)
# In[49]: result.head()
# In[50]: cm = confusion_matrix(list(result['real_values'].values.astype(int)),list(result['hypothesis'].values.astype(int)))
# In[51]: cm
# In[52]:
# Plot Confusion Matrix
# credits : https://www.kaggle.com/grfiv4/plot-a-confusion-matrix def plot_confusion_matrix(cm, target_names, title='Confusion matrix', cmap=None, normalize=True): """ given a sklearn confusion matrix (cm), make a nice plot Arguments --------- cm: confusion matrix from sklearn.metrics.confusion_matrix target_names: given classification classes such as [0, 1, 2] the class names, for example: ['high', 'medium', 'low'] title: the text to display at the top of the matrix cmap: the gradient of the values displayed from matplotlib.pyplot.cm see http://matplotlib.org/examples/color/colormaps_reference.html plt.get_cmap('jet') or plt.cm.Blues normalize: If False, plot the raw numbers If True, plot the proportions Usage ----- plot_confusion_matrix(cm = cm,
# confusion matrix created by
# sklearn.metrics.confusion_matrix normalize = True,
# show proportions target_names = y_labels_vals,
# list of names of the classes title = best_estimator_name)
# title of graph Citiation --------- http://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html """ import matplotlib.pyplot as plt import numpy as np import itertools accuracy = np.trace(cm) / float(np.sum(cm)) misclass = 1 - accuracy if cmap is None: cmap = plt.get_cmap('Blues') plt.figure(figsize=(8, 6)) plt.imshow(cm, interpolation='nearest', cmap=cmap) plt.title(title) plt.colorbar() if target_names is not None: tick_marks = np.arange(len(target_names)) plt.xticks(tick_marks, target_names, rotation=45) plt.yticks(tick_marks, target_names) if normalize: cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis] thresh = cm.max() / 1.5 if normalize else cm.max() / 2 for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])): if normalize: plt.text(j, i, "{:0.4f}".format(cm[i, j]), horizontalalignment="center", color="white" if cm[i, j] > thresh else "black") else: plt.text(j, i, "{:,}".format(cm[i, j]), horizontalalignment="center", color="white" if cm[i, j] > thresh else "black") plt.tight_layout() plt.ylabel('True label') plt.xlabel('Predicted label\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass)) plt.show()
# In[54]:
# 1 - True , 2 - False plot_confusion_matrix(cm, normalize = False, target_names = ['True', 'False'], title = "Confusion Matrix")
